on:
  push:
    branches:
      - drat

# Note on the above: if more than one branch given one may stomp on the other
name: drat

jobs:
  drat:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
#        - {os: windows-latest, r: 'release'}
#        - {os: macOS-latest, r: 'release'}
#        - {os: macOS-latest, r: 'devel'}
        - {os: ubuntu-16.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      SOURCE_REPO: ${{ github.event.repository.name }}
      DEST_REPO:  mokymai/download
      DEST_ORG:   mokymai
      DEST_REPO_NAME:  download
      ENV: ${{ env.SOURCE_REPO }}

    steps:
      - name: Show env
        run: echo $ENV
#
#       - uses: actions/checkout@v2
#
#       - uses: r-lib/actions/setup-r@master
#         with:
#           r-version: ${{ matrix.config.r }}
#
#       # - uses: r-lib/actions/setup-pandoc@master
#
#       - name: Query dependencies
#         run: |
#           install.packages('remotes')
#           saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
#           writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
#         shell: Rscript {0}
#
#       - name: Cache R packages
#         if: runner.os != 'Windows'
#         uses: actions/cache@v1
#         with:
#           path: ${{ env.R_LIBS_USER }}
#           key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
#           restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
#
#       - name: Install system dependencies
#         if: runner.os == 'Linux'
#         env:
#           RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
#         run: |
#           Rscript -e "remotes::install_github('r-hub/sysreqs')"
#           sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
#           sudo -s eval "$sysreqs"
#
#       - name: Install dependencies
#         run: |
#           remotes::install_cran(c("rcmdcheck", "roxygen2", "drat"))
#           remotes::install_deps(dependencies = TRUE)
#         shell: Rscript {0}
#
#       - name: Roxygenize
#         run:   roxygen2::roxygenize()
#         shell: Rscript {0}
#
#       - name: Build and Check
#         env:
#           _R_CHECK_CRAN_INCOMING_REMOTE_: false
#         run: |
#             rcmdcheck::rcmdcheck(
#               args = c("--no-manual", "--as-cran"),
#               error_on = "warning",
#               check_dir = "check"
#             )
#         shell: Rscript {0}
#
#       - name: Upload check results
#         if: failure()
#         uses: actions/upload-artifact@master
#         with:
#           name: ${{ runner.os }}-r${{ matrix.config.r }}-results
#           path: check
#
# # Everything above is standard build & check steps
# # Now the steps to deploy to ${DEST_REPO_NAME}
#
# # The following configure step is
# # from https://stackoverflow.com/a/60548651/633251
#       # - name: Configure git
#       #   env:
#       #     TOKEN: ${{ secrets.HYSPC_EO_TOKEN }}
#       #   run: git config --global url."https://${TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
#       #
#       # - name: Deploy -- clone
#       #   if: success()
#       #   run: |
#       #     rm -rf ${DEST_REPO_NAME}
#       #     git clone https://github.com/${DEST_ORG}/${DEST_REPO_NAME}.git ${DEST_REPO_NAME}
#       #     cd ${DEST_REPO_NAME}
#       #     git checkout master
#
#       - uses: actions/checkout@v2
#         with:
#           repository: "${DEST_ORG}/${DEST_REPO_NAME}" # 'mokymai/download'
#           # ref: 'master'
#           path: "${DEST_ORG}"
#           # fetch-depth: ''
#
#           # Personal access token (PAT) used to fetch the repository. The PAT is configured
#           # with the local git config, which enables your scripts to run authenticated git
#           # commands. The post-job step removes the PAT.
#           # token: ''
#
#           # SSH key used to fetch the repository. The SSH key is configured with the local
#           # git config, which enables your scripts to run authenticated git commands. The
#           # post-job step removes the SSH key.
#           # ssh-key: ''
#
#           # Known hosts in addition to the user and global host key database. The public SSH
#           # keys for a host may be obtained using the utility `ssh-keyscan`. For example,
#           # `ssh-keyscan github.com`. The public key for github.com is always implicitly
#           # added.
#           # ssh-known-hosts: ''
#
# # Please leave commented lines below, they are very helpful in troubleshooting.
#       # - name: Deploy -- update README.md
#         # if: success()
#         # run: |
#         #    cd ${DEST_REPO_NAME}
#         #    # grab the portion of the file we want to re-use
#         #    awk '/^# hySpc\.pkgs$/, /^Packages currently residing here:$/' README.md > README.tmp
#         #    # append the listing of .tar.gz present, along
#         #    # a little formating (appending to .md that will be parsed
#         #    # and displayed by GH)
#         #    ls -lhR  --time-style=long-iso | grep \.tar\.gz$ | awk '{print "\n* "$8, " ("$6")"}' >> README.tmp
#         #    mv README.tmp README.md
#
#       - name: Deploy -- insert
#         if: success()
#         run: |
#           print(Sys.getenv("DEST_REPO_NAME"))
#
#           print(Sys.getenv())
#
#           DEST_REPO_NAME <- Sys.getenv("DEST_REPO_NAME")
#           setwd(paste0("../", DEST_REPO_NAME))
#
#           print(getwd())
#
#           print(list.files(recursive = TRUE, pattern = "\\.tar\\.gz"))
#
#           targz <- list.files(
#             path = "check",
#             pattern = "\\.tar\\.gz",
#             full.names = TRUE
#           )[1] # there will be only one!
#
#           print(targz)
#
#           drat::insertPackage(
#             targz,
#             repodir = DEST_REPO_NAME,
#             action = "archive"
#           )
#         shell: Rscript {0}
#
#       - name: Deploy -- commit and push
#         if: success()
#         run: |
#           git config --global user.email "actions@github.com"
#           git config --global user.name "GitHub Actions"
#           cd ${DEST_REPO_NAME} # move into the subdir, which is git controlled
#           git add *
#           git commit -m "Update from ${SOURCE_REPO}"
#           git push origin master
# # # Why do we need that? GH pages can use `master` as its source.
# # git checkout gh-pages # always keep the branches identical!
# # git merge master
# # git push origin gh-pages
# #
