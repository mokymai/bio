on:
  push:
    branches:
      - drat2

# Note on the above: if more than one branch given one may stomp on the other
name: test-GH-Actions

jobs:
  drat:
    runs-on: ${{ matrix.config.os }}

    name: "drat: ${{ matrix.config.os }} (R-${{ matrix.config.r }})"

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-16.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          # - {os: ubuntu-16.04,   r: 'oldrel',  rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          # - {os: ubuntu-16.04,   r: 'devel',   rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          # - {os: windows-latest, r: 'release'}
          # - {os: windows-latest, r: 'oldrel'}
          # - {os: windows-latest, r: 'devel'}
          # - {os: macOS-latest,   r: 'release'}
          # - {os: macOS-latest,   r: 'oldrel'}
          # - {os: macOS-latest,   r: 'devel'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      SOURCE_REPO: ${{ github.repository }}
      DEST_REPO:   mokymai/download
      TMP_DIR:     tmp_dir

    steps:
      - uses: actions/checkout@v2

# The steps to include built package in ${DEST_REPO}

      - name: Git clone DEST_REPO
        uses: actions/checkout@v2
        with:
          repository: ${{ env.DEST_REPO }} # 'mokymai/download'
          ref:   'master'
          path:  "${{ env.TMP_DIR }}"
          token: "${{ secrets.DEPLOY_DRAT_TOKEN }}"
          fetch-depth: '0'

      - name: Drat -- git versions -1
        run: |
          cd ${TMP_DIR}
          pwd

          git ls-files -z .tar.gz '*.tar.gz' |\
            xargs -0 -n 1 -I {} -- git log -1 --format="%as {}" {} |\
            grep \.tar\.gz$                           |\
            grep Archive -v                           |\
            sed 's/src\/contrib\///g'                 |\
            sed 's/_/ /g'                             |\
            sed 's/.tar.gz/ /g'                       |\
            awk '{print "- **"$2"**", $3, "("$1")"}'  |\
            sort -Vi

      - name: Drat -- awk
        run: |
          cd ${TMP_DIR}
          pwd

          ls -lhR --time-style=long-iso --ignore="Archive" |\
             grep \.tar\.gz$                          |\
             sed 's/_/ /g'                            |\
             sed 's/.tar.gz/ /g'                      |\
             awk '{print "- **"$8"**", $9, "("$6")"}' |\
             sort -Vir

      - name: Drat -- update README.md
        if: success()
        run: |
           cd ${TMP_DIR}
           pwd

           # grab the portion of the file we want to re-use
           awk '/^# /, /^<!-- list of packages: start | DO NOT REMOVE THIS LINE -->/' README.md > README.tmp

           # =================================================================
           # Insert the list of packages (current versions)

           # This code should be optimized so that files in "Archive" dir
           # were not listed before passing to "xargs"

           echo "" >> README.tmp # add blank line
           echo "Packages currently residing here:"  >> README.tmp
           echo "" >> README.tmp # add blank line

           echo "Package       | Version       | Updated on    " >> README.tmp
           echo "------------- | ------------- | ------------- " >> README.tmp
           git ls-files -z .tar.gz '*.tar.gz'          |\
             xargs -0 -n 1 -I {} -- git log -1 --format="%as {}" {} |\
             grep \.tar\.gz$                           |\
             grep Archive -v                           |\
             sed 's/src\/contrib\///g'                 |\
             sed 's/_/ /g'                             |\
             sed 's/.tar.gz/ /g'                       |\
             awk '{print $2" | "$3" | "$1 }'           |\
             sort -t$'|' -k1i,1 -k2Vr,2                >> README.tmp

           echo "" >> README.tmp # add blank line

           # =================================================================
           # Insert the list of packages (old versions)

           # Do if any archived .tar.gz file exists
           if [[ -n $(find "src/contrib" -type f | grep "Archive" | grep '\.tar.gz$') ]]; then
             echo "Previous (archived) versions of the packages residing here: " >> README.tmp
             echo "" >> README.tmp # add blank line

             echo "Package       | Version       | Archived on   " >> README.tmp
             echo "------------- | ------------- | ------------- " >> README.tmp
             git ls-files -z .tar.gz '*Archive/*.tar.gz' |\
               xargs -0 -n 1 -I {} -- git log -1 --format="%as {}" {} |\
               sed 's/src\/contrib\/Archive\///g'        |\
               sed 's/\// /g'                            |\
               sed 's/_/ /g'                             |\
               sed 's/.tar.gz/ /g'                       |\
               awk '{print $3" | "$4" | "$1 }'           |\
               sort -t$'|' -k1i,1 -k2Vr,2                >> README.tmp
           fi

           # Create a new version of README.md
           mv README.tmp README.md

           cat README.md

