% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/packages.R
\name{get_pkgs_installation_status_local}
\alias{get_pkgs_installation_status_local}
\alias{get_pkgs_installation_status}
\alias{get_pkg_lists_local}
\alias{get_last_pkgs_installation_status}
\alias{print.pkgs_installation_status}
\alias{get_pkgs_installation_code}
\title{Get package installation status and code.}
\usage{
get_pkgs_installation_status_local(
  list_name,
  use_local_list = getOption("bio.use_local_list", TRUE)
)

get_pkgs_installation_status(
  list_name,
  include = "outdated",
  show_status = include,
  install = include,
  cran = install,
  github = install,
  elsewhere = install,
  use_local_list = getOption("bio.use_local_list", FALSE)
)

get_pkg_lists_local()

get_last_pkgs_installation_status()

\method{print}{pkgs_installation_status}(x, show_status = x$show_status, ...)

get_pkgs_installation_code(
  x = NULL,
  ...,
  to_clipboard = FALSE,
  upgrade = FALSE
)
}
\arguments{
\item{list_name}{(character) The name of the list with required R packages.
E.g., "mini", "Rcmdr", "Rcmdr-biostat", "bio", etc.}

\item{use_local_list}{(logical) If \code{TRUE}, the list, which is locally
installed in the folder of package \pkg{bio} ("local list"), is used.
If \code{FALSE}, the list on "GitHub" repository of the package is used.
It is recommended  using the online version of the list, as it may
contain more recent changes.
Optiom bight be set globally by, e.g.,
\code{options(bio.use_local_list = TRUE)}.}

\item{include}{(character) Which packages from the list (indicated in \code{list_name})
must be included in the results.
One of:
- \code{"always"} or \code{TRUE}: all packages;
- \code{"newer_on_cran"} -- only the packages that are \code{"outdated"} or have
newer version on CRAN. For arguments \code{github} and \code{elsewhere},
value \code{"newer_on_cran"} is replaced with \code{"outdated"}.
- \code{"outdated"} (default): only the packages that are not installed
or do not have a minimum required version installed.
- \code{"missing"}: only the packages that are not installed.
- \code{"never"} or \code{FALSE}: none.}

\item{show_status}{(character) Which packages should be included in the
package installation status summary.
See options of \code{include}.
Defaults to the value of \code{include}.}

\item{install}{(character) Which packages should be included in the
package installation code.
See options of \code{include}.
Defaults to the value of \code{include}.
Sets the default value for \code{cran}, \code{github}, and \code{elsewhere}.}

\item{cran}{(character) Condition to filter packages that should be
included in code that installs packages from CRAN.
See options of \code{include} plus value \code{"required"}.
Defaults to the value of \code{install}.
- \code{"required"} -- packages that do not have a minimum required version
installed even if the required version is not on CRAN.}

\item{github}{(character) Condition to filter packages that should be
included in code that installs packages from GitHub.
See options of \code{include} plus value \code{"required"}.
Defaults to the value of \code{install}.}

\item{elsewhere}{(character) Condition to filter packages that should
be included in code that installs packages from other sources.
See options of \code{include} plus value \code{"required"}.
Defaults to the value of \code{install}.}

\item{x}{Object of interest.}

\item{...}{Arguments to other methods.}

\item{to_clipboard}{(logical) If \code{TRUE}, the code is copied to clipboard and
returned only invisibly.}

\item{upgrade}{Upgrade dependencies.
See \code{upgrade} in \code{\link[remotes:install_github]{remotes::install_github()}}.}
}
\description{
Get package installation status (e.g., if packages of interest are installed
or need to be updated) and package installation code.
}
\examples{
head(get_pkgs_installation_status_local("mini"))
\dontrun{\donttest{

# NOTE: It is not recommended to use the local lists as they might be out of date.
options(bio.use_local_list = TRUE)
list_name <- "mini"

(status_out <- get_pkgs_installation_status("mini"))
get_pkgs_installation_code(status_out)

(status_all <- get_pkgs_installation_status("mini", include = "always"))
get_pkgs_installation_code(status_all)

(status_custom <-
  get_pkgs_installation_status("mini", include = "always", install = "outdated"))
get_pkgs_installation_code(status_custom)

# Package "remembers" the last created 'pkgs_installation_status' object
get_pkgs_installation_status("snippets")
get_last_pkgs_installation_status()
get_pkgs_installation_code()

}}
}
\seealso{
Other R-packages-related functions: 
\code{\link{compare_version}()},
\code{\link{get_pkgs_cran_details}()},
\code{\link{get_pkgs_installed}()},
\code{\link{get_pkgs_non_cran_installation_details}()},
\code{\link{get_pkgs_recommended}()},
\code{\link{get_pkgs_req_version}()}
}
\concept{R-packages-related functions}
